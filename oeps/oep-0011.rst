================================
OEP-11: Front End Best Practices
================================

+---------------+-------------------------------------------+
| OEP           | :doc:`OEP-11 </oeps/oep-0011>`            |
+---------------+-------------------------------------------+
| Title         | Front End Best Practices                  |
+---------------+-------------------------------------------+
| Last Modified | 2016-10-19                                |
+---------------+-------------------------------------------+
| Author        | Andy Armstrong <andya@edx.org>            |
+---------------+-------------------------------------------+
| Arbiter       | TBD                                       |
+---------------+-------------------------------------------+
| Status        | Draft                                     |
+---------------+-------------------------------------------+
| Type          | Best Practice                             |
+---------------+-------------------------------------------+
| Created       | 2016-10-19                                |
+---------------+-------------------------------------------+

Abstract
========

This document describes the best practices for developing front end applications
and components for Open edX. It covers the techniques and approaches that
are currently recommended, as well as the suggested technologies and libraries
that should be used.


Specification
=============

Best Practices
~~~~~~~~~~~~~~

1. **Front ends should render themselves server-side as much as possible**

   Rationale: Server-side rendering gives the content to the user
   immediately without requiring additional round-trips. This can make
   for large performance improvements on slow networks or mobile devices.

   If a dynamic client-side experience is needed, then the server-side
   page should include JavaScript code along with the HTML. See the
   technical recommendations below for more detail.

2. **Designs should be built upon patterns from the edX Pattern Library**

   Rationale: The `edX Pattern Library`_  is a collection of web application
   components and visual styles that you can use to develop UIs that are
   consistent with the edX platform.

   You can learn more about building user interfaces with the pattern
   library in the Developer's Guide chapter `Developing User Interfaces`_.

3. **Features should work equally well on mobile and web platforms**

   Rationale: Open edX provides iOS and Android applications in addition
   to its web applications, and so new learner features need to be implemented
   for all three platforms. The simplest way to achieve feature parity is to
   provide a responsive web experience that can be used on phones and tablets
   as well as on desktops and laptops. The `edx Pattern Library`_ helps with
   this by providing a responsive grid system along with components that
   work equally well on mobile and web.

4. **Designs should be fully accessible**

   Rationale: Open edX measures and evaluates accessibility using the World
   Wide Web Consortiumâ€™s `Web Content Accessibility Guidelines (WCAG) 2.0`_.
   All features merged into edX repositories are expected to conform to
   Level AA of this specification and to satisfy the requirements outlined in
   the `edX Website Accessibility Policy`_.

   You can learn more about developing accessible applications with
   the Developer's Guide chapter `edX Accessibility Guidelines`_.

5. **Front end applications should support localization**

   Rationale: Open edX is used by learners all over the world, and so
   it is critical that all new functionality support localization. This
   includes ensuring that all new user interfaces will switch to
   right-to-left mode when the language requires it.

   You can learn more about localization with the Developer's Guide
   chapter `edX Internationalization`_.

7. **Front end implementations should support theming**

   Rationale: Open edX is used by organizations around the world,
   and each one requires that the user experience is based upon their
   own brand. This includes elements as simple as overriding the fonts,
   imagery and color schemes, to more complex customization of headers,
   footers and registration flows.

   You can learn more about how Open edX supports theming with
   the guide `Changing Themes for an Open edX Site`_. One simple way to
   make your interface themeable is to use patterns from the
   `edX Pattern Library`_ as they already support theming.

8. **Front end code should be safe from cross site scripting**

   Cross Site Scripting (XSS) vulnerabilities allow user-supplied data to be
   incorrectly executed as code in a web browser. This can allow an attacker
   to inject malicious scripts, which in the worst case can cause the loss
   of private user data.

   In order to keep your code safe from such attackers, you should follow the
   best practices laid out in the guide
   `Preventing Cross Site Scripting Vulnerabilities`_.

Technology Selection
~~~~~~~~~~~~~~~~~~~~

1. **Server-side templating should use Django Templates**

   Rationale: There are many template languages available for Django,
   but the simplest option is to use the built-in Django template engine.
   The Open edX codebase has a mixture of Django and Mako templates, but the
   former are easier to reason about because they don't support arbitrary
   code evaluation. See `Reasons for rejecting Mako`_ for a more detailed
   explanation.

   **Exception**: Mako templates should be used within edx-platform for
   consistency with the existing code base. Unfortunately there has been too
   much investment in Mako to consider replacing it at this point.

2. **ECMAScript 2015 should be the supported version of JavaScript**

   Rationale: ECMAScript is the standardized version of JavaScript,
   and the most recently ratified version is ECMAScript 2015. It is
   commonly referred to by ES2015, or by ES6 (its original name). Most
   browsers now provide native support for ES2015, but it is generally
   recommended to use `Babel`_ to transpile ES2015 code into ES5 which is
   universally supported.

3. **JavaScript libraries should be installed via npm**

   Rationale: It is important that JavaScript libraries are kept
   up-to-date, and one key component is to make it as simple as possible
   to perform upgrades. Projects that use npm maintain all of their
   library requirements in a single package.json file, which can be
   easily changed as the versions change.

4. **JavaScript code should follow the edX ESLint configuration**

   Rationale: In order to standardize and enforce Open edX's JavaScript
   coding style across multiple codebases, edX has published an ESLint
   configuration that provides an enforceable specification. The
   `edX ESLint Config`_ is made available as an npm package that can be
   installed into any Open edX package.

5. **Front-end interactivity should be added using Backbone**

   Rationale: There are a large number of JavaScript libraries for
   building rich client applications, but many of them are too
   rigid for a flexible, extensible codebase like Open edX. Backbone
   has the major benefit that it can be added incrementally to existing
   pages, no matter the framework that is used. It also provides a clean
   programming model that enforces a clean separation between models
   and views.

   Note: Backbone is a somewhat old technology in the JavaScript world
   and has seen a rapid drop off in usage within the community. See
   :ref:`JavaScript Frameworks` below for the open question of which
   of the many alternate frameworks should become the new Open edX standard.
   For now, Backbone is the library of choice because so much of the
   Open edX codebase uses it.

6. **JavaScript dependencies should be declared via RequireJS**

   Rationale: Open edX is a large, complicated code base, and it is
   getting more tangled over time. RequireJS allows code to declare
   the dependencies it requires, rather than forcing every page to load
   all possible libraries. It also supports intelligent bundling using
   RequireJS Optimizer, which can package together all required libraries
   into a single file for faster performance.

7. **CSS should be generated using SASS**

   Rationale: Sass is an extension of CSS that adds power and elegance to
   the basic language. It makes the maintenance of large CSS files more
   manageable though the ability to use variables, mixins, imports and more.
   In particular, it makes theming possible with the ability to override
   variables that define colors, fonts etc.

   You can find out more about Sass with the official guide
   `Sass: CSS with Superpowers`_.

Open Questions
==============

.. _JavaScript frameworks:

1. **Which more modern JavaScript framework should be supported?**

   The JavaScript space is very fast moving as can be seen in
   `The State of JavaScript 2016 Survey`_. There is a lot of momentum
   around `React`_, and it appears to have many qualities that would
   make it a good fit for edX. It is too early to make this call, but
   plans are being made to evaluate its usage. See `React at edX`_ for
   more details.

2. **How should offline support be provided?**

   For many mobile users, it would be very useful if they could continue
   their Open edX courses while offline. This is true both for true mobile
   apps as well as for responsive web applications. This is an area that
   has not been explored much up to now, but which will only become more
   important going forward.

3. **Should Universal JavaScript be considered?**

   There are many companies that are seeing performance benefits by
   pre-rendering their dynamic client-side applications on the server first.
   The most common approach is to run the same JavaScript code both in the
   browser and using Node on the server. This requires the use of a JavaScript
   framework that does not perform direct manipulation of the DOM, but instead
   works with an abstraction of the desired HTML. For example, Netflix is
   seeing great performance gains by using `React`_ in this way, as can be
   seen in the blog post `Making Netflix Faster`_.

4. **Where do web components fit with Open edX applications?**

   Web Components is a W3C recommendation that allows developers to create
   custom HTML elements for use within their web applications. The
   `Polymer Project` provides a library that allows web components to be
   built in most modern browsers. It seems that there is a useful overlap
   between web components and Open edX's `XBlocks`_

5. **Which build tools and asset pipeline should be used?**

   There are already a variety of technologies used within Open edX,
   none of which is a clear winner. Django Pipeline is used by
   edx-platform, Django Compressor is used by some of the Ecommerce
   applications, and Webpack is prevalent in pure front-end implementations.

6. **Should HTTP/2 be used in preference to asset bundling?**

   The Hypertext Transfer Protocol Version 2 (HTTP/2) enables more efficient
   network communication between clients and servers. In particular, it
   allows for multiple requests to be handled with the same TCP connection,
   which removes most of the benefits of asset bundling. It is not yet
   clear whether this is ready for full scale adoption, but it would reduce
   a lot of complexity from application's asset pipelines.



Rejected Alternatives
=====================

Note: this section needs fleshing out...

.. _Reasons for rejecting Bootstrap:
1. **Bootstrap**

 - size
 - not accessible
 - too inflexible
 - might want to consider compatibility to allow mixing Bootstrap components
   into pattern library pages

.. _Reasons for rejecting CoffeeScript:
2. **CoffeeScript**

   The Open edX codebase made heavy use of CoffeeScript for several years,
   but it has now been officially deprecated. Most of the language
   benefits of CoffeeScript are now made available via ES2015.

.. _Reasons for rejecting Mako:
3. **Mako**

   Mako templates are hard to unit test because they require that the
   whole Django context be available in case the template tries to
   access it. Django templates only have access to the context object
   that is passed to it, so it is very easy to simulate all possible
   scenarios.

   Needs fleshing out...

.. Cross-references
.. _Changing Themes for an Open edX Site: http://edx.readthedocs.io/projects/edx-installing-configuring-and-running/en/open-release-eucalyptus.master/configuration/changing_appearance/theming/index.html
.. _Developing User Interfaces: http://edx.readthedocs.io/projects/edx-developer-guide/en/latest/user_interface_development.html
.. _edX Accessibility Guidelines: http://edx.readthedocs.io/projects/edx-developer-guide/en/latest/conventions/accessibility.html
.. _edX ESLint Config: https://github.com/edx/eslint-config-edx
.. _edX Internationalization: http://edx.readthedocs.io/projects/edx-developer-guide/en/latest/conventions/internationalization/index.html
.. _edX Pattern Library: http://ux.edx.org/
.. _edX Website Accessibility Policy: https://www.edx.org/accessibility
.. _HTTP 2: http://httpwg.org/specs/rfc7540.html
.. _Making Netflix Faster: http://techblog.netflix.com/2015/08/making-netflixcom-faster.html
.. _Modernizing the edX front end stack: https://openedx.atlassian.net/wiki/display/FEDX/Modernizing+the+edX+front+end+stack
.. _Polymer Project: https://www.polymer-project.org/
.. _Preventing Cross Site Scripting Vulnerabilities: http://edx.readthedocs.io/projects/edx-developer-guide/en/latest/conventions/safe_templates.html
.. _React: https://github.com/reactjs
.. _React at edX: https://openedx.atlassian.net/wiki/display/FEDX/React+at+edX
.. _Sass: CSS with Superpowers: http://sass-lang.com/
.. _The State of JavaScript 2016 Survey: http://stateofjs.com/
.. _Web Content Accessibility Guidelines (WCAG) 2.0: http://www.w3.org/TR/WCAG/
.. _XBlocks: https://xblock.readthedocs.org/
