name,ring,quadrant,isNew,description
OEPs,adopt,process,FALSE,"<p>Capture all edX platform technology decisions in a versioned and git-reviewed repository.  These include architectural decisions, best practices, and proposed processes.</p> <p>Decisions that are platform-wide should be captured centrally in <a href=""https://github.com/edx/open-edx-proposals"">open-edx-proposals</a>.  Decisions that do not have wider impact and are local to a specific git repository should be captured within that repo.</p> <p>Documenting decisions benefits future team members and allows alignment across teams throughout the open edX community. Doing so within a git repo allows decisions to be in synch with the code itself.</p><p>See <a href=""https://www.thoughtworks.com/radar/techniques/lightweight-architecture-decision-records"">Lightweight Architecture Decisions Records</a> for more information.</p>"
Docker,trial,technology,TRUE,"<p>See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0005-arch-containerize-devstack.html"">OEP-5</a> for rationale for using containerization in developer environments.  See <a href=""https://github.com/edx/devstack"">devstack</a> for how to use docker devstack.</p>"
Context-scoped xBlock Fields,hold,design pattern,FALSE,"<p>See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0006-arch-context-xblock-fields.html"">OEP-6</a> for rationale for having course-wide and context-wide settings for xBlocks.</p>"
Vagrant,hold,technology,TRUE,"<p>See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0005-arch-containerize-devstack.html"">OEP-5</a> for rationale for using containerization in developer environments and scalability issues with Vagrant.  See <a href=""https://github.com/edx/devstack"">devstack</a> for how to use docker devstack instead of Vagrant.</p>"
Python 3,adopt,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0007-bp-migrate-to-python3.html"">OEP-7</a>.</p>"
JS: install via NPM,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0011-bp-FED-technology.html"">OEP-11</a>.</p>"
JS: build with React,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0011-bp-FED-technology.html"">OEP-11</a>.</p>"
JS: bundle with Webpack,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0011-bp-FED-technology.html"">OEP-11</a>.</p>"
JS: state management with Redux,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0011-bp-FED-technology.html"">OEP-11</a>.</p>"
JS: style with Sass,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0011-bp-FED-technology.html"">OEP-11</a>.</p>"
JS: bootstrap reusable components,assess,technology,TRUE,"<p> See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0016-bp-adopt-bootstrap.html"">OEP-16</a>.</p>"
UI Fragment views,hold,design pattern,TRUE,"<p>Fragment Views, as described in <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0012-arch-fragment-views.html"">OEP-12</a>, require server-side rendering of front-end code.  This pattern worked well previously when edX fully adopted server-side rendering via Django templates.  However, as we shift to splitting frontend and backend, we need an alternative design model for pluggable user interfaces.</p>"
Frontend Backend split,assess,design pattern,TRUE,"<p>As we assess React and its ecosystem for building front end technology, we are moving towards client-side rendering of our frontend views with a cleaner separation from backend APIs.</p>"
Feature toggles,trial,design pattern,TRUE,"<p>See <a href=""http://open-edx-proposals.readthedocs.io/en/latest/oep-0017-bp-feature-toggles.html"">OEP-17</a>.</p>"
Domain-driven design,assess,design pattern,TRUE,<p>TODO</p>
xBlocks depend on Django,trial,design pattern,TRUE,"<p>xBlocks can use standard Django features, such as Django models and Django i18n services, without needing to depend on custom xBlock runtimes to provide these services.</p><p>Although this proposal is mentioned in OEP-12, it hasn't yet been widely announced nor formally captured as a decision.  Essentially, we have decided to allow xBlock developers to depend on Django directly rather than require all Django services and dependencies to be exported via xBlock Runtime services.  This allows them to use standard Django functionality and capabilities rather than us implementing home-grown solutions/wrappers in xBlock runtimes, APIs, etc.</p>"
LMS: Block Transformers,adopt,framework,TRUE,"<p>LMS should use alternative read-optimized storage for course content, rather than using the less performant Modulestore.</p><p><a href=""https://openedx.atlassian.net/wiki/spaces/EDUCATOR/pages/34734111/Course+Block+Transformers"">Block Transformers</a> is a pluggable framework for pre-computed, de-normalized, read-optimized cache of Course Graphs to be used for fast-reads in the LMS; also re-computed on every Course Publish.</p><p>Motivation: The Modulestore infrastructure is not optimized for read-access as it is instead designed for versioning and read-write access. When retrieving course content from the Modulestore, the LMS faces unacceptable latency from (1) accessing data from Mongo, (2) instantiating xBlocks, and (3) traversing the course graph when resolving field inheritance.</p>"
LMS: Course Overviews,adopt,design pattern,TRUE,"<p>LMS should use alternative read-optimized storage for course content, rather than using the less performant Modulestore.</p><p><a href=""https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/content/course_overviews/__init__.py"">Course Overviews</a> is a read-optimized LMS view/cache of Course Metadata that is stored in SQL and synchronized with the Modulestore on every Course Publish and periodically synchronized with Course Catalog data.</p><p>Motivation: The Modulestore infrastructure is not optimized for read-access as it is instead designed for versioning and read-write access. When retrieving course content from the Modulestore, the LMS faces unacceptable latency from (1) accessing data from Mongo, (2) instantiating xBlocks, and (3) traversing the course graph when resolving field inheritance.</p>"
Isolated services,assess,design pattern,TRUE,"<p>Isolate services, especially in blocking user-facing requests. Follow the <a href=""https://www.reactivemanifesto.org/"">Reactive Manifesto</a> principles and have inter-service dependencies be asynchronous, without user-facing blocking calls from one service to another.</p><strong>Motivation</strong>
<ul>
<li><strong>Resiliency (via Isolation).</strong> By embracing the Message-driven and Asyncronous recommendations in the Reactive Manifesto, we keep our microservices decoupled and simplify our overall system (less need for Bulkheads and Circuit breakers).</li>
<li></strong>Performance (via Local Views/Caches).</strong> Each microservice maintains its own data as it needs it - transforming it into whatever optimized structure/value that it needs.</li>
<li><strong>Maintainability and Availability (via Clear Synchronization Points).</strong> Each microservice connection can have its own anti-corruption layer to validate and transform received data at a single point for all features within the microservice. Since this happens within a background process, previously validated and persisted synched-data can continue to be used in case of interface breakage - erring on the side of Eventual Consistency over Blocking Accuracy.</li>
</ul>
<strong>Alternatives</strong>
<ul><li>One design alternative that is currently implemented by some features is to make blocking calls to the Catalog service from the LMS, but with timeouts and ephemeral caches in place. However, ephemeral caches should be considered only that - ephemeral - and cannot be guaranteed to always have the data that is needed to complete the request.  Also, automatically generated caches need to scale as the number of permutations of API request parameters increase.</li></ul>
<strong>Exceptions</strong>
<ul><li>Features that really need Consistency/Accuracy over Availability may need to make blocking calls to other Microservices.  For example, a purchasing workflow that needs accurate information about both product and pricing information may need to access the latest data from distributed services - and cannot rely on a synchronization process.</li>"
Deprecate and Remove,assess,process,TRUE,"<p>To reverse the direction of the monolithic evolution of the edx-platform, it is necessary to have individual apps plugin to the platform and follow the S.O.D. of the SOLID principles as described in <a href=""https://github.com/edx/edx-platform/blob/dba976fc169f861db290cc4ac7db28d8d436c661/openedx/core/djangolib/django_plugins.py#L2-L37"">Django App Plugin</a>.  Additionally, to support the varying feature requirements and experimentation by the open edX community (and within edx.org), a plugin framework provides a powerful flexibility that keeps the edX core as an invulnerable and stable platform but a welcoming enabler.</p>"
Automated Communication Engine (ACE),trial,framework,TRUE,"Use edX ACE as the notifications framework for automatically sending messages to users.  It provides a common extensible and scalable messaging framework for edX features that handles personalization, translations, policies and configurability."